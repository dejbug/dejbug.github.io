# Generated from blog.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,97,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,3,1,41,
        8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,4,14,70,
        8,14,11,14,12,14,71,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        3,15,83,8,15,1,15,1,15,1,15,1,15,1,15,4,15,90,8,15,11,15,12,15,91,
        1,16,1,16,1,17,1,17,0,0,18,1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,
        0,19,0,21,0,23,1,25,2,27,3,29,4,31,5,33,6,35,7,1,0,8,2,0,9,9,32,
        32,3,0,9,10,13,13,32,32,2,0,10,10,13,13,5,0,33,33,44,44,46,46,58,
        60,62,63,8,0,33,33,35,59,61,61,63,91,93,93,95,95,97,122,126,126,
        7,0,9,10,13,13,32,33,44,44,46,46,58,59,63,63,6,0,9,10,13,13,32,32,
        48,57,65,90,97,122,3,0,48,57,65,90,97,122,89,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,1,37,1,0,0,0,3,40,1,0,0,0,5,44,1,0,0,0,7,46,1,0,0,0,9,48,1,
        0,0,0,11,50,1,0,0,0,13,52,1,0,0,0,15,54,1,0,0,0,17,56,1,0,0,0,19,
        58,1,0,0,0,21,60,1,0,0,0,23,62,1,0,0,0,25,64,1,0,0,0,27,66,1,0,0,
        0,29,69,1,0,0,0,31,82,1,0,0,0,33,93,1,0,0,0,35,95,1,0,0,0,37,38,
        7,0,0,0,38,2,1,0,0,0,39,41,5,13,0,0,40,39,1,0,0,0,40,41,1,0,0,0,
        41,42,1,0,0,0,42,43,5,10,0,0,43,4,1,0,0,0,44,45,8,1,0,0,45,6,1,0,
        0,0,46,47,8,2,0,0,47,8,1,0,0,0,48,49,8,1,0,0,49,10,1,0,0,0,50,51,
        7,0,0,0,51,12,1,0,0,0,52,53,7,2,0,0,53,14,1,0,0,0,54,55,7,3,0,0,
        55,16,1,0,0,0,56,57,7,4,0,0,57,18,1,0,0,0,58,59,8,2,0,0,59,20,1,
        0,0,0,60,61,8,5,0,0,61,22,1,0,0,0,62,63,5,35,0,0,63,24,1,0,0,0,64,
        65,8,6,0,0,65,26,1,0,0,0,66,67,7,7,0,0,67,28,1,0,0,0,68,70,3,27,
        13,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,
        30,1,0,0,0,73,74,5,104,0,0,74,75,5,116,0,0,75,76,5,116,0,0,76,83,
        5,112,0,0,77,78,5,104,0,0,78,79,5,116,0,0,79,80,5,116,0,0,80,81,
        5,112,0,0,81,83,5,115,0,0,82,73,1,0,0,0,82,77,1,0,0,0,83,84,1,0,
        0,0,84,85,5,58,0,0,85,86,5,47,0,0,86,87,5,47,0,0,87,89,1,0,0,0,88,
        90,3,17,8,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,
        0,0,92,32,1,0,0,0,93,94,7,0,0,0,94,34,1,0,0,0,95,96,7,2,0,0,96,36,
        1,0,0,0,5,0,40,71,82,91,0
    ]

class blogLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Hash = 1
    Punct = 2
    Char = 3
    Word = 4
    Link = 5
    Space = 6
    Feed = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#'" ]

    symbolicNames = [ "<INVALID>",
            "Hash", "Punct", "Char", "Word", "Link", "Space", "Feed" ]

    ruleNames = [ "SP", "LF", "UrlChars", "LineChars", "WordChars", "HS", 
                  "VS", "PUNCT", "LINKCC", "LINECC", "WORDCC", "Hash", "Punct", 
                  "Char", "Word", "Link", "Space", "Feed" ]

    grammarFileName = "blog.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


